import unittest

from src.board import Board
from resources.FENs import FOURKNIGHTS_FEN, LONDON_FEN

EXPECTED_LONDON_WHITE = {
    "p": int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00010000",
        "00101000",
        "11000111",
        "00000000",
    ]), 2),
    "n": int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000100",
        "00010000",
        "00000000",
    ]), 2),
    "b": int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000100",
        "00010000",
        "00000000",
        "00000000",
    ]), 2),
    "r":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "10000100",
    ]), 2),
    "q":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00010000",
    ]), 2),
    "k":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000010",
    ]), 2),
}
EXPECTED_LONDON_BLACK = {
    "p":int("".join([
        "00000000",
        "11000111",
        "00001000",
        "00110000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "n":int("".join([
        "00000000",
        "00000000",
        "00100100",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "b":int("".join([
        "00000000",
        "00001000",
        "00000000",
        "00000100",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "r":int("".join([
        "10000100",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "q":int("".join([
        "00010000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "k":int("".join([
        "00000010",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
}
EXPECTED_4KNIGHTS_WHITE = {
    "p":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00001000",
        "00000000",
        "11110111",
        "00000000",
    ]), 2),
    "n":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00100100",
        "00000000",
        "00000000",
    ]), 2),
    "b":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00100100",
    ]), 2),
    "r":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "10000001",
    ]), 2),
    "q":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00010000",
    ]), 2),
    "k":int("".join([
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00001000",
    ]), 2),
}
EXPECTED_4KNIGHTS_BLACK = {
    "p":int("".join([
        "00000000",
        "11110111",
        "00000000",
        "00001000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "b":int("".join([
        "00100100",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "k":
    int("".join([
        "00000000",
        "00000000",
        "00100100",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "r":int("".join([
        "10000001",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "q":int("".join([
        "00010000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
    "k":int("".join([
        "00001000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
    ]), 2),
}

class TestBoard(unittest.TestCase):
    def setUp(self):
        self.board = Board()

    # FEN constructor verification --> check board state is loaded correctly
    def test_constructor(self):
        EXPECTED_LONDON_WHITE = {
            "p": int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00010000",
                "00101000",
                "11000111",
                "00000000",
            ]), 2),
            "n": int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000100",
                "00010000",
                "00000000",
            ]), 2),
            "b": int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000100",
                "00010000",
                "00000000",
                "00000000",
            ]), 2),
            "r":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "10000100",
            ]), 2),
            "q":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00010000",
            ]), 2),
            "k":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000010",
            ]), 2),
        }
        EXPECTED_LONDON_BLACK = {
            "p":int("".join([
                "00000000",
                "11000111",
                "00001000",
                "00110000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "n":int("".join([
                "00000000",
                "00000000",
                "00100100",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "b":int("".join([
                "00000000",
                "00001000",
                "00000000",
                "00000100",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "r":int("".join([
                "10000100",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "q":int("".join([
                "00010000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "k":int("".join([
                "00000010",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
        }
        EXPECTED_4KNIGHTS_WHITE = {
            "p":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00001000",
                "00000000",
                "11110111",
                "00000000",
            ]), 2),
            "n":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00100100",
                "00000000",
                "00000000",
            ]), 2),
            "b":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00100100",
            ]), 2),
            "r":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "10000001",
            ]), 2),
            "q":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00010000",
            ]), 2),
            "k":int("".join([
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00001000",
            ]), 2),
        }
        EXPECTED_4KNIGHTS_BLACK = {
            "p":int("".join([
                "00000000",
                "11110111",
                "00000000",
                "00001000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "n":
            int("".join([
                "00000000",
                "00000000",
                "00100100",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "b":int("".join([
                "00100100",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "r":int("".join([
                "10000001",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "q":int("".join([
                "00010000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
            "k":int("".join([
                "00001000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
                "00000000",
            ]), 2),
        }
        
        london = Board(LONDON_FEN)

        for k, v in london.white_positions.items():
            self.assertEqual(v.bitboard, EXPECTED_LONDON_WHITE[k])

        for k, v in london.black_positions.items():
            self.assertEqual(v.bitboard, EXPECTED_LONDON_BLACK[k])

        four_knights = Board(FOURKNIGHTS_FEN)

        for k, v in four_knights.white_positions.items():
            self.assertEqual(v.bitboard, EXPECTED_4KNIGHTS_WHITE[k])

        for k, v in four_knights.black_positions.items():
            self.assertEqual(v.bitboard, EXPECTED_4KNIGHTS_BLACK[k])



    # get_color_bitboard()

    # check_overlap()

    # get_piece()

    # handle moves --> including pawn moves

    # show()

if __name__=="__main__":
    unittest.main()
